// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
async function injectDeps(deps) {
	return await new Promise((resolve, reject) => {
		if (!Array.isArray(deps)) {
			deps = [deps];
		}
		window.dojoDynamicRequire(deps, function () { resolve(Array.from(arguments)) });
	});
}
function onDestroy(containerId, cb) {
	var myWidget = dojo.dijit.registry.byId(containerId);

	myWidget.addOnDestroy(cb);
}

//GPT js_function(some_number)  对js_function节流，300ms后再对some_number进行去重，分别执行一次js_function(some_number).some_number换成行和列index，300ms内不重复执行相同的组合
function debounce(fn, delay) {
	let timeoutId;
	return function () {
		const args = arguments;
		clearTimeout(timeoutId);
		timeoutId = setTimeout(function () {
			fn.apply(this, args);
		}, delay);
	};
}
function delay(ms) {
	return new Promise(resolve => setTimeout(resolve, ms));
}
// END EXTRA CODE

/**
 * @param {string} sheetId
 * @param {string} detailId
 * @returns {Promise.<void>}
 */
export async function ChangeSideEffect_2(sheetId, detailId) {
	// BEGIN USER CODE
	const [html, on, lang] = await injectDeps(['dojo/html', "dojo/on", "dojo/_base/lang"]);
	const container = document.querySelector(`#${sheetId}`);
	const containerdetailId = document.querySelector(`#${detailId}`);

	$(containerdetailId).append('<button id="save" class="btn btn-primary disabled">保存</button>');

	const disp = on(container, 'mx.data.get', async ({ data: { objs, cols } }) => {
		await delay(100);
		let combinations = [];

		function logic(row, col) {
			luckysheet.setCellValue(row, col + 1, +luckysheet.getCellValue(row, col) + 5)
		}

		function js_function(row, col) {
			logic(row, col)
			let combination = [row, col];
			if (!combinations.some(c => c[0] === row && c[1] === col)) {
				combinations.push(combination);
				$(`#${detailId} #save`).removeClass('disabled');
			}
			return combinations;
		}

		const disp2 = on(container, 'updated', ({ data: { operate } }) => {
			if (operate.type == "datachange") {
				const range = operate.range[0];
				if (range.row.length > 1 && range.row[0] == range.row[1]) {
					if (range.row[0] > 0 && range.column[0] == 0) {
						js_function(range.row[0], range.column[0])
					}
				}
			}
		});

		function handle() {
			console.log(combinations);
			combinations.forEach(([row, col]) => {
				const obj = objs[row - 1];
				cols.forEach((colName, colIdx) => {
					obj.set(colName, luckysheet.getCellValue(row, colIdx))
				})
			})
			mx.data.action({
				params: {
					applyto: "selection",
					actionname: "LuckySheetSingle.Act_Save",
					guids: objs.map(d => d.getGuid())
				},
				origin: this.mxform,
				callback: function (obj) {
					// expect single MxObject
					combinations.length=0;
					$(`#${detailId} #save`).addClass('disabled');
				},
				error: function (error) {
				}
			});
		}

		$(`#${detailId} #save`).click(handle);

		onDestroy(detailId, () => {
			disp2.remove();
		})
	});



	onDestroy(detailId, () => {
		disp.remove();
	})
	// END USER CODE
}
