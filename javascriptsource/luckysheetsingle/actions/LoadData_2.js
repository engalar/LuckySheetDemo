// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
async function injectDeps(deps) {
	return await new Promise((resolve, reject) => {
		if (!Array.isArray(deps)) {
			deps = [deps];
		}
		window.dojoDynamicRequire(deps, function () { resolve(Array.from(arguments)) });
	});
}
function onDestroy(containerId, cb) {
	var myWidget = dojo.dijit.registry.byId(containerId);

	myWidget.addOnDestroy(cb);
}

function convertToExcelColumn(num) {
	let result = '';
	while (num > 0) {
		let remainder = num % 26;
		if (remainder === 0) {
			remainder = 26;
			num--;
		}
		result = String.fromCharCode(remainder + 64) + result;
		num = Math.floor(num / 26);
	}
	return result;
}
// END EXTRA CODE

/**
 * @param {string} targetId
 * @param {string} myEntity
 * @returns {Promise.<void>}
 */
export async function LoadData_2(targetId, myEntity) {
	// BEGIN USER CODE
	const [on, lang] = await injectDeps(["dojo/on", "dojo/_base/lang"]);
	const container = document.querySelector('#' + targetId);

	const objsCache = [];

	const disp = on(container, '_loaded', () => {
		// Your logic
		mx.data.get({
			xpath: "//" + myEntity,
			callback: function (objs) {
				if (objs.length) {
					objs.forEach((e, r) => {

						objsCache.push(mx.data.subscribe({ guid: e.getGuid() }, () => {

						}));
					})
					const obj = objs[0];

					let attributes = obj.getAttributes();
					let filtered_attributes = attributes.filter(attr => !attr.includes('.'));


					for (let i = 0; i < filtered_attributes.length; i++) {

						luckysheet.setCellValue(0, i, filtered_attributes[i]);
						objs.forEach((e, r) => {
							const v = e.get(filtered_attributes[i]);
							luckysheet.setCellValue(r + 1, i, v.toNumber ? v.toNumber() : v);
						})
					}

					// lock cell
					const sqref = "$A$2:$" + convertToExcelColumn(filtered_attributes.length) + "$" + (objs.length + 1);
					luckysheet.setConfig(
						{
							"authority": {//Permission configuration of the current worksheet
								selectLockedCells: 1, //Select locked cells
								selectunLockedCells: 1, //Select unlocked cells
								formatCells: 1, //Format cells
								formatColumns: 1, //Format columns
								formatRows: 1, //Format rows
								insertColumns: 1, //Insert columns
								insertRows: 1, //Insert rows
								insertHyperlinks: 1, //Insert hyperlinks
								deleteColumns: 1, //Delete columns
								deleteRows: 1, //Delete rows
								sort: 1, //Sort
								filter: 1, //Filter
								usePivotTablereports: 1, //Use Pivot Table reports
								editObjects: 1, //Edit objects
								editScenarios: 1, //Edit scenarios   
								sheet: 1, //If it is 1 or true, the worksheet is protected; if it is 0 or false, the worksheet is not protected.
								hintText: "", //The text of the pop-up prompt
								algorithmName: "None",//Encryption scheme: MD2,MD4,MD5,RIPEMD-128,RIPEMD-160,SHA-1,SHA-256,SHA-384,SHA-512,WHIRLPOOL
								saltValue: null, //The salt parameter for password decryption is a random value set by yourself

								allowRangeList: [
									{ //Range protection
										name: "area", //Name
										//password: "1", //Password
										//hintText: "", //Prompt text
										//algorithmName: "None",//Encryption scheme: MD2,MD4,MD5,RIPEMD-128,RIPEMD-160,SHA-1,SHA-256,SHA-384,SHA-512,WHIRLPOOL
										//saltValue: null, //The salt parameter for password decryption is a random value set by yourself
										sqref //Protected range
									}
								],
							}
						});

					on.emit(container, 'mx.data.get', { data: { objs, cols: filtered_attributes } });

				}
			}
		});
	});

	onDestroy(targetId, () => {
		disp.remove();
		objsCache.forEach((e, r) => {
			e.unsubscribe();
		});
		var data = luckysheet.getluckysheetfile()[0].data;

		for (var i = 0; i < data.length; i++) {
			for (var j = 0; j < data[i].length; j++) {
				data[i][j] = null;
			}
		}

	})
	// END USER CODE
}
